AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  S3BucketName:
    Type: String
    Default: hosted-bucket
  DynamoDBScanName:
    Type: String
    Default: scan-db
  DynamoDBQueryName:
    Type: String
    Default: query-db

Resources:
  # Website Hosting Services - Start
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::StackName}-${S3BucketName}"
      WebsiteConfiguration:
        IndexDocument: "index.html"

  ReadPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: "allow-all"
        # This DefaultRootObject configuration is not enough.
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt "S3Bucket.DomainName"
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        PriceClass: "PriceClass_All"
  # Website Hosting Services - End

  # API
  ResponseStreamingFunctionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

  # Lambdas - DDB Use Case
  DDBRegularLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/DDBRegularLambda
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          SCAN_DB_NAME: !Sub "${AWS::StackName}-${DynamoDBScanName}"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /regular
            Method: get
            RestApiId:
              Ref: ResponseStreamingFunctionApi
    Connectors:
      ScanTableConnector:
        Properties:
          Destination:
            Id: ScanTable
          Permissions:
            - Write
            - Read
      QueryTableConnector:
        Properties:
          Destination:
            Id: QueryTable
          Permissions:
            - Write
            - Read
  DDBStreamingLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/DDBStreamingLambda
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 1024
      AutoPublishAlias: live
      Environment:
        Variables:
          SCAN_DB_NAME: !Sub "${AWS::StackName}-${DynamoDBScanName}"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /response_streaming
            Method: get
            RestApiId:
              Ref: ResponseStreamingFunctionApi
    Connectors:
      ScanTableConnector:
        Properties:
          Destination:
            Id: ScanTable
          Permissions:
            - Write
            - Read
      QueryTableConnector:
        Properties:
          Destination:
            Id: QueryTable
          Permissions:
            - Write
            - Read

  DDBStreamingLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      InvokeMode: RESPONSE_STREAM
      TargetFunctionArn: !Ref DDBStreamingLambda

  DDBStreamingLambdaPublicAccess:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DDBStreamingLambda
      Principal: "*"

  # DDB Tables
  ScanTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-${DynamoDBScanName}"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  QueryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-${DynamoDBQueryName}"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "category"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "category"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  # Lambdas - ChatGPT Use Case
  StreamingLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - nodejs18.x
      ContentUri: src/utils/
      Description: Lambda layer for openai package
      LayerName: Lambda-Layer-Streaming
    Metadata:
      BuildMethod: nodejs18.x
  ChatGPTStreamingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ChatGPTStreamingLambda
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 1024
      AutoPublishAlias: live
      Layers:
        - !Ref StreamingLambdaLayer
      Environment:
        Variables:
          API_KEY: >-
            {{resolve:secretsmanager:CHAT_GPT:SecretString:API_KEY}}

  ChatGPTStreamingFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      InvokeMode: RESPONSE_STREAM
      TargetFunctionArn: !Ref ChatGPTStreamingFunction

  ChatGPTStreamingFunctionPublicAccess:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatGPTStreamingFunction
      Principal: "*"
  ChatGPTRegularLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ChatGPTRegularLambda
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 1024
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /chatgpt_regular
            Method: post
            RestApiId:
              Ref: ResponseStreamingFunctionApi
      Layers:
        - !Ref StreamingLambdaLayer
      Environment:
        Variables:
          API_KEY: >-
            {{resolve:secretsmanager:CHAT_GPT:SecretString:API_KEY}}

Outputs:
  ResponseLambdaUrlDDB:
    Value: !GetAtt DDBStreamingLambdaUrl.FunctionUrl
  ResponseLambdaUrlChatGPT:
    Value: !GetAtt ChatGPTStreamingFunctionUrl.FunctionUrl
  ApiResourceId:
    Value: !GetAtt ResponseStreamingFunctionApi.RestApiId
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
